{% extends 'pages/settings/base.html.twig' %}

{% block title %}Create User - {{ app.request.server.get('SITE_NAME') }}{% endblock %}

{% block body %}
    {% import '_macros/settings.html.twig' as settings_macro %}
    {% import '_macros/breadcrumb.html.twig' as breadcrumb %}
    {% import '_macros/form/form.html.twig' as form_macros %}
    <div class="max-w-8xl md:mx-auto md:px-auto lg:px-6">
        <div class="xl:pt-[2.3615rem] pt-[15rem]">
            <div class="xl:pl-[25rem]">
                <div class="w-full mx-auto pt-10 xl:max-w-none xl:ml-4 rounded-xl mb-4">
                    {{ breadcrumb.add('Users', 'https://mediaease.github.io/docs/') }}
                    <div id="content-wrapper" class="relative px-4 mt-8 dark:prose-dark pb-3 mb-4 bg-gray-200/55 dark:bg-gray-900/85 rounded-lg">
                        {{ form_start(createUserForm, {'attr': {'id': 'create-user-form', 'data-twe-validation-init': 'true'}}) }}
                        <div class="flex-grow mb-8 pt-4 text-left">
                            <div class="relative mb-6" data-twe-input-wrapper-init data-twe-validate="input">
                                {{ form_widget(createUserForm.username, {'attr': {'id': 'create_user_username', 'class': 'block rounded-t-md px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer', 'placeholder': ' '}}) }}
                                {{ form_label(createUserForm.username, 'Username', {'label_attr': {'class': 'absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] start-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4'}})}}
                                <p id="error-create_user_username" class="mt-2 text-xs text-red-600 dark:text-red-400" style="display: none;"></p>
                            </div>

                            <div class="relative mb-6" data-twe-input-wrapper-init data-twe-validate="input">
                                {{ form_widget(createUserForm.email, {'attr': {'id': 'create_user_email', 'class': 'block rounded-t-md px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer', 'placeholder': ' '}}) }}
                                {{ form_label(createUserForm.email, 'Email', {'label_attr': {'class': 'absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] start-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4'}})}}
                                <p id="error-create_user_email" class="mt-2 text-xs text-red-600 dark:text-red-400" style="display: none;"></p>
                            </div>

                            <span class="block text-sm font-bold mt-4 text-left">Choose a password</span>
                            <p id="floating_helper_text" class="mb-2 text-xs text-gray-500 dark:text-gray-400">Enter a password for the user.</p>
                            <div class="flex space-x-4">
                                <div class="w-1/2 relative" data-twe-input-wrapper-init data-twe-validate="input">
                                    {{ form_widget(createUserForm.plainPassword.first, {'attr': {'id': 'create_user_plainPassword_first', 'class': 'block rounded-t-md px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer', 'placeholder': ' '}}) }}
                                    {{ form_label(createUserForm.plainPassword.first, 'Password', {'label_attr': {'class': 'absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] start-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4'}})}}
                                </div>
                                <div class="w-1/2 relative" data-twe-input-wrapper-init data-twe-validate="input">
                                    {{ form_widget(createUserForm.plainPassword.second, {'attr': {'id': 'create_user_plainPassword_second', 'class': 'block rounded-t-md px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer', 'placeholder': ' '}}) }}
                                    {{ form_label(createUserForm.plainPassword.second, 'Repeat Password', {'label_attr': {'class': 'absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] start-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4'}})}}
                                </div>
                            </div>
                            <p id="error-create_user_plainPassword" class="mb-6 mt-2 text-xs text-red-600 dark:text-red-400" style="display: none;"></p>

                            <div class="relative my-6" data-twe-input-wrapper-init data-twe-validate="input">
                                {{ form_widget(createUserForm.group, {'attr': {'id': 'create_user_group', 'class': 'block rounded-t-md px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer', 'placeholder': ' '}}) }}
                                {{ form_label(createUserForm.group, 'Group', {'label_attr': {'class': 'absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] start-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4'}})}}
                                <p id="error-create_user_group" class="mt-2 text-xs text-red-600 dark:text-red-400" style="display: none;"></p>
                            </div>
                        </div>
                        <div class="flex justify-start flex-row-reverse items-center mb-4 xl:m-0 xl:p-0 py-3">
                            <button type="submit" class="{{ createUserForm.save.vars.button_class }}">
                                {{ ux_icon(createUserForm.save.vars.icon_before, {class: createUserForm.save.vars.icon_class ~ ' icon mr-1'})|raw }}{{ createUserForm.save.vars.label }}
                            </button>
                        </div>
                        {{ form_row(createUserForm._token) }}
                        {{ form_end(createUserForm, {'render_rest': false}) }}
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("create-user-form");
            if (form) {
                form.addEventListener("submit", async function (event) {
                    event.preventDefault();

                    const formData = new FormData(form);
                    const action = form.getAttribute("action") || window.location.href;
                    const csrfToken = form.querySelector('input[name="create_user[_token]"]').value;

                    try {
                        const response = await fetch(action, {
                            method: "POST",
                            body: formData,
                            headers: {
                                'X-CSRF-TOKEN': csrfToken
                            }
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            console.error("Response status:", response.status);
                            console.error("Response text:", errorText);
                            const responseData = JSON.parse(errorText);
                            clearErrors();
                            renderErrors(responseData.errors);
                            throw new Error("Network response was not ok");
                        }

                        const responseData = await response.json();
                        clearErrors();

                        if (responseData.errors) {
                            renderErrors(responseData.errors);
                        } else {
                            // Handle successful form submission (e.g., redirect or show success message)
                            window.location.href = responseData.redirectUrl;
                        }
                    } catch (error) {
                        console.error("Form submission error:", error);
                    }
                });
            }

            function clearErrors() {
                const errorDivs = document.querySelectorAll(".form-error");
                errorDivs.forEach((div) => {
                    div.style.display = "none";
                    div.innerHTML = "";
                });
                const inputFields = document.querySelectorAll(".peer");
                inputFields.forEach((field) => {
                    field.classList.remove('border-red-600', 'dark:border-red-500', 'focus:border-red-600', 'dark:focus:border-red-500');
                });
                const labels = document.querySelectorAll("label");
                labels.forEach((label) => {
                    label.classList.remove('text-red-600', 'dark:text-red-500');
                });
            }

            function renderErrors(errors) {
                for (const [field, message] of Object.entries(errors)) {
                    const errorDiv = document.getElementById(`error-create_user_${field}`);
                    if (errorDiv) {
                        errorDiv.innerHTML = `${message}`;
                        errorDiv.style.display = "block";
                    }

                    // If the error is related to password fields, show it on both fields and a unified error message
                    if (field === 'first') {
                        const passwordErrorDiv = document.getElementById('error-create_user_plainPassword');
                        if (passwordErrorDiv) {
                            passwordErrorDiv.innerHTML = `${message}`;
                            passwordErrorDiv.style.display = "block";
                        }
                        const passwordFields = document.querySelectorAll('#create_user_plainPassword_first, #create_user_plainPassword_second');
                        passwordFields.forEach((field) => {
                            field.classList.add('border-red-600', 'dark:border-red-500', 'focus:border-red-600', 'dark:focus:border-red-500');
                        });
                        const passwordLabels = document.querySelectorAll('label[for="create_user_plainPassword_first"], label[for="create_user_plainPassword_second"]');
                        passwordLabels.forEach((label) => {
                            label.classList.add('text-red-600', 'dark:text-red-500');
                        });
                    } else {
                        const inputField = document.getElementById(`create_user_${field}`);
                        if (inputField) {
                            inputField.classList.add('border-red-600', 'dark:border-red-500', 'focus:border-red-600', 'dark:focus:border-red-500');
                        }
                        const label = inputField ? inputField.parentNode.querySelector('label') : null;
                        if (label) {
                            label.classList.add('text-red-600', 'dark:text-red-500');
                        }
                    }
                }
            }
        });
    </script>
{% endblock %}
