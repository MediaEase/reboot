nelmio_api_doc:
  use_validation_groups: true
  areas:
    default:
      path_patterns:
        - ^/api
      disable_default_routes: true
  documentation:
    openapi: 3.1.0
    info:
      title: HarmonyUI V1 API
      description: >-
        Use these APIs to interact with the  HarmonyUI backend.
        You can find out more about the HarmonyUI project at htttps://github.com/MediaEase/HarmonyUI
      termsOfService: https:///github.com/MediaEase/HarmonyUI/tos
      contact:
        name: MediaEase
        url: htttps://github.com/MediaEase/MediaEase
      license:
        name: MIT
        url: https://opensource.org/licenses/MIT
      version: 1.0.0
    servers:
      - url: "http://localhost:8000"
        description: Local development server
    security:
      - Bearer: []
      - apiKey: []
    tags:
      - name: Apps
        description: Operations involving applications
      - name: Authentication
        description: Authentication and authorization processes
      - name: Groups
        description: Group management and information
      - name: Logs
        description: Access and management of log data
      - name: Metrics
        description: Metrics and performance data interactions
      - name: Mounts
        description: File system mount management
      - name: Profile
        description: User profile settings and information
      - name: Services
        description: Service management and operations
      - name: Store
        description: Store functionalities and data
      - name: Users
        description: User management and details
      - name: Widgets
        description: Widget functionalities and settings
    models:
      names:
        - {
            alias: User.list,
            type: App\Entity\User,
            groups: ["get:users", "get:user-limited", "get:user"],
          }
        - { alias: User.item, type: App\Entity\User, groups: ["get:user"] }
        - {
            alias: Application.list,
            type: App\Entity\Application,
            groups: ["get:users", "get:user-limited", "get:user"],
          }
        - {
            alias: Group.list,
            type: App\Entity\Group,
            groups: ["get:users", "get:user-limited", "get:user"],
          }
        - {
            alias: Mount.list,
            type: App\Entity\Mount,
            groups: ["get:users", "get:user-limited", "get:user"],
          }
        - {
            alias: Preference.list,
            type: App\Entity\Preference,
            groups: ["get:users", "get:user-limited", "get:user"],
          }
        - {
            alias: Service.list,
            type: App\Entity\Service,
            groups: ["get:users", "get:user-limited", "get:user"],
          }
        - {
            alias: Store.list,
            type: App\Entity\Store,
            groups: ["get:users", "get:user-limited", "get:user"],
          }
        - {
            alias: Widget.list,
            type: App\Entity\Widget,
            groups: ["get:users", "get:user-limited", "get:user", "get:widget"],
          }
        - {
            alias: Widget.item,
            type: App\Entity\Widget,
            groups: ["get:widget"],
          }
    paths:
      # APPS
      /api/apps:
        get:
          tags:
            - Apps
          summary: Get all applications
          operationId: api_apps_list
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Application.list"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "500":
              $ref: "#/components/responses/500"
        post:
          tags:
            - Apps
          summary: Create a new application
          operationId: api_apps_create
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Application.item"
          responses:
            "201":
              description: Created
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Application.item"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "405":
              $ref: "#/components/responses/405"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
      /api/apps/{id}:
        get:
          tags:
            - Apps
          summary: Get an application by ID
          operationId: api_apps_get
          parameters:
            - name: id
              in: path
              required: true
              description: ID of the application to get
              schema:
                type: integer
                format: int64
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Application.item"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "500":
              $ref: "#/components/responses/500"
        put:
          tags:
            - Apps
          summary: Update an application by ID
          operationId: api_apps_update
          parameters:
            - name: id
              in: path
              required: true
              description: ID of the application to update
              schema:
                type: integer
                format: int64
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Application.item"
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Application.item"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
        delete:
          tags:
            - Apps
          summary: Delete an application by ID
          operationId: api_apps_delete
          parameters:
            - name: id
              in: path
              required: true
              description: ID of the application to delete
              schema:
                type: integer
                format: int64
          responses:
            "204":
              $ref: "#/components/responses/204"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "500":
              $ref: "#/components/responses/500"
      # AUTHENTICATION
      /api/auth/login:
        post:
          tags:
            - Authentication
          summary: Get JWT token
          operationId: login
          requestBody:
            content:
              application/json:
                schema:
                  properties:
                    username:
                      type: string
                    password:
                      type: string
                  type: object
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    type: object
                    properties:
                      token:
                        type: string
            "400":
              $ref: "#/components/responses/400"
            "405":
              $ref: "#/components/responses/405"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
          security: []
      # GROUPS
      /api/groups:
        get:
          tags:
            - Groups
          summary: Get all groups
          operationId: api_groups_list
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Group.list"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "500":
              $ref: "#/components/responses/500"
        post:
          tags:
            - Groups
          summary: Create a new group
          operationId: api_groups_create
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Group.item"
          responses:
            "201":
              description: Created
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Group.item"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "405":
              $ref: "#/components/responses/405"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
      /api/groups/{id}:
        get:
          tags:
            - Groups
          summary: Get a group by ID
          operationId: api_groups_get
          parameters:
            - name: id
              in: path
              required: true
              description: ID of the group to get
              schema:
                type: integer
                format: int64
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Group.item"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "500":
              $ref: "#/components/responses/500"
        put:
          tags:
            - Groups
          summary: Update a group by ID
          operationId: api_groups_update
          parameters:
            - name: id
              in: path
              required: true
              description: ID of the group to update
              schema:
                type: integer
                format: int64
          requestBody:
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Group.item"
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Group.item"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
        delete:
          tags:
            - Groups
          summary: Delete a group by ID
          operationId: api_groups_delete
          parameters:
            - name: id
              in: path
              required: true
              description: ID of the group to delete
              schema:
                type: integer
                format: int64
          responses:
            "204":
              $ref: "#/components/responses/204"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "500":
              $ref: "#/components/responses/500"
      # LOGS
      # METRICS
      /api/metric/cpu:
        get:
          tags:
            - Metrics
          summary: Get CPU metrics
          operationId: getCpuUsage
          responses:
            "200":
              description: Returns CPU metrics
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Widget.cpu.item"
            "401":
              $ref: "#/components/responses/401"
      /api/metric/disk:
        get:
          tags:
            - Metrics
          summary: Get disk metrics
          operationId: getDiskUsage
          responses:
            "200":
              description: Returns disk metrics
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Widget.disk.item"
            "401":
              $ref: "#/components/responses/401"
      /api/metric/mem:
        get:
          tags:
            - Metrics
          summary: Get ram metrics
          operationId: getMetricsMem
          responses:
            "200":
              description: Returns ram metrics
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Widget.memory.item"
            "401":
              $ref: "#/components/responses/401"
      /api/metric/net:
        get:
          tags:
            - Metrics
          summary: Get network metrics
          operationId: getNetworkUsage
          responses:
            "200":
              description: Returns network metrics
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Widget.network.item"
            "401":
              $ref: "#/components/responses/401"
      # MOUNTS
      # PROFILE
      /api/me:
        get:
          tags:
            - Profile
          summary: Get user profile
          operationId: getProfile
          responses:
            "200":
              description: Returns user profile
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/User.item"
            "401":
              $ref: "#/components/responses/401"
            "500":
              $ref: "#/components/responses/500"
      /api/me/preferences/pin:
        patch:
          tags:
            - Profile
          summary: Update user pin
          operationId: updatePin
          requestBody:
            content:
              application/hal+json:
                schema:
                  $ref: "#/components/schemas/PinnedApps"
          responses:
            "200":
              description: User pin updated
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/PinnedApps"
            "204":
              $ref: "#/components/responses/204"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
      /api/me/preferences/{preferenceKey}:
        patch:
          tags:
            - Profile
          summary: Update a user preference
          description: Update a specific user preference by key.
          operationId: updatePreference
          parameters:
            - in: path
              name: preferenceKey
              required: true
              schema:
                type: string
                description: The key of the preference to update.
            - in: query
              name: value
              required: true
              schema:
                type: string
                description: The value to set the preference to.
          responses:
            "200":
              description: Preference updated successfully.
              content:
                application/json:
                  schema:
                    oneOf:
                      - $ref: "#/components/schemas/Theme"
                      - $ref: "#/components/schemas/Lang"
                      - $ref: "#/components/schemas/Shell"
                      - $ref: "#/components/schemas/Display"
            "204":
              $ref: "#/components/responses/204"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
      /api/me/preferences/widgets:
        patch:
          tags:
            - Profile
          summary: Update user widgets
          operationId: updateWidgets
          requestBody:
            content:
              application/hal+json:
                schema:
                  $ref: "#/components/schemas/Widget.item"
          responses:
            "200":
              description: User widgets updated
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Widget.item"
            "204":
              $ref: "#/components/responses/204"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
      /api/me/services:
        post:
          tags:
            - Profile
          summary: Add service
          operationId: addService
          requestBody:
            content:
              application/hal+json:
                schema:
                  $ref: "#/components/schemas/Service.item"
          responses:
            "201":
              description: Service added
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Service.item"
            "401":
              $ref: "#/components/responses/401"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
      /api/me/services/{id}:
        delete:
          tags:
            - Profile
          summary: Delete service
          operationId: deleteService
          parameters:
            - name: id
              in: path
              description: Service Identifier
              schema:
                type: integer
              required: true
          responses:
            "204":
              $ref: "#/components/responses/204"
            "401":
              $ref: "#/components/responses/401"
            "404":
              $ref: "#/components/responses/404"
            "500":
              $ref: "#/components/responses/500"
        patch:
          tags:
            - Profile
          summary: Update service
          operationId: updateService
          parameters:
            - name: id
              in: path
              description: Service Identifier
              schema:
                type: integer
              required: true
          requestBody:
            content:
              application/hal+json:
                schema:
                  $ref: "#/components/schemas/Service.item"
          responses:
            "200":
              description: Service updated
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Service.item"
            "204":
              $ref: "#/components/responses/204"
            "401":
              $ref: "#/components/responses/401"
            "404":
              $ref: "#/components/responses/404"
            "422":
              $ref: "#/components/responses/422"
            "500":
              $ref: "#/components/responses/500"
      /api/me/services/status:
        get:
          tags:
            - Profile
          summary: Get services status
          operationId: api_me_services_status
          responses:
            "200":
              description: Returns services status
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/ServiceStatus"
            "401":
              $ref: "#/components/responses/401"
            "500":
              $ref: "#/components/responses/500"
      # SERVICES
      # STORE
      # USERS
      # WIDGETS
      /api/widgets:
        get:
          tags:
            - Widgets
          summary: Get all widgets
          operationId: api_widgets_list
          responses:
            "200":
              description: OK
              content:
                application/hal+json:
                  schema:
                    $ref: "#/components/schemas/Widget.list"
            "400":
              $ref: "#/components/responses/400"
            "401":
              $ref: "#/components/responses/401"
            "403":
              $ref: "#/components/responses/403"
            "404":
              $ref: "#/components/responses/404"
            "405":
              $ref: "#/components/responses/405"
            "500":
              $ref: "#/components/responses/500"
    components:
      securitySchemes:
        Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT
        apiKey:
          type: apiKey
          description: "Value: {apiKey}"
          in: header
          name: X-API-KEY
      responses:
        "204":
          description: No content - indicates the request was successful but there is no content to be returned in the response.
        "400":
          description: Client Error - Returned if the request body is invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
        "401":
          description: Unauthorized - Returned if there is no authorization header, or if the JWT token is expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    description: A message describing the error
                    example: "JWT validation failed: JWT is expired"
        "403":
          description: Forbidden - Returned if the user you are running as, doesn't have access to this end-point.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
              examples:
                "403":
                  summary: An example of a 403 response object
                  value:
                    detailCode: 403 Forbidden
                    trackingId: b21b1f7ce4da4d639f2c62a57171b427
                    messages:
                      - locale: en-US
                        localeOrigin: DEFAULT
                        text: The server understood the request but refuses to authorize it.
        "404":
          description: Not Found - returned if the request URL refers to a resource or object that does not exist
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
              examples:
                "404":
                  summary: An example of a 404 response object
                  value:
                    detailCode: 404 Not found
                    trackingId: b21b1f7ce4da4d639f2c62a57171b427
                    messages:
                      - locale: en-US
                        localeOrigin: DEFAULT
                        text: The server did not find a current representation for the target resource.
        "405":
          description: Method Not Allowed - indicates that the server knows the request method, but the target resource doesn't support this method.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorName:
                    description: A message describing the error
                    example: NotSupportedException
                  errorMessage:
                    description: Description of the error
                    example: Cannot consume content type
                  trackingId:
                    type: string
                    description: Unique tracking id for the error.
                    example: e7eab60924f64aa284175b9fa3309599
        "422":
          description: Unprocessable Entity - Returned if the request was not processed due to validation errors.
        "500":
          description: Internal Server Error - Returned if there is an unexpected error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponseDto"
              examples:
                "500":
                  summary: An example of a 500 response object
                  value:
                    detailCode: 500.0 Internal Fault
                    trackingId: b21b1f7ce4da4d639f2c62a57171b427
                    messages:
                      - locale: en-US
                        localeOrigin: DEFAULT
                        text: An internal fault occurred.
      schemas:
        # PROPERTY SCHEMAS
        PinnedApps:
          type: array
          items:
            $ref: "#/components/schemas/Service.item"
        Theme:
          type: object
          properties:
            theme:
              type: string
        Lang:
          type: object
          properties:
            language:
              type: string
        Shell:
          type: object
          properties:
            shell:
              type: string
        Display:
          type: object
          properties:
            display:
              type: string
        ServiceStatus:
          type: object
          properties:
            message:
              type: string
        # OBJECTS SCHEMAS
        Application.item:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            altname:
              type: string
            logo:
              type: string
            store:
              $ref: "#/components/schemas/Store.item"
        Application.list:
          type: object
          properties:
            applications:
              type: array
              items:
                $ref: "#/components/schemas/Application.item"
        Group.item:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            users:
              type: array
              items:
                $ref: "#/components/schemas/User.item"
            stores:
              type: array
              items:
                $ref: "#/components/schemas/Store.item"
        Group.list:
          type: object
          properties:
            groups:
              type: array
              items:
                $ref: "#/components/schemas/Group.item"
        Mount.item:
          type: object
          properties:
            id:
              type: integer
              format: int64
            path:
              type: string
            rclone:
              type: boolean
            user:
              $ref: "#/components/schemas/User.item"
        Mount.list:
          type: object
          properties:
            mounts:
              type: array
              items:
                $ref: "#/components/schemas/Mount.item"
        Preference.item:
          type: object
          properties:
            id:
              type: integer
              format: int64
            pinnedApps:
              type: array
              items:
                type: string
            display:
              type: string
            shell:
              type: string
            selectedWidgets:
              type: array
              items:
                type: string
            theme:
              type: string
            user:
              $ref: "#/components/schemas/User.item"
            backdrop:
              type: string
            avatar:
              type: string
            isFullAppListingEnabled:
              type: boolean
        Preference.list:
          type: object
          properties:
            preferences:
              type: array
              items:
                $ref: "#/components/schemas/Preference.item"
        Service.item:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            version:
              type: string
            status:
              type: string
            apikey:
              type: string
            ports:
              type: array
              items:
                type: string
            configuration:
              type: array
              items:
                type: string
            application:
              $ref: "#/components/schemas/Application.item"
            user:
              $ref: "#/components/schemas/User.item"
            parentService:
              $ref: "#/components/schemas/Service.item"
            childServices:
              type: array
              items:
                $ref: "#/components/schemas/Service.item"
        Service.list:
          type: object
          properties:
            services:
              type: array
              items:
                $ref: "#/components/schemas/Service.item"
        Store.item:
          type: object
          properties:
            id:
              type: integer
              format: int64
            description:
              type: string
            isPro:
              type: boolean
            isAvailable:
              type: boolean
            type:
              type: string
            application:
              $ref: "#/components/schemas/Application.item"
            groups:
              type: array
              items:
                $ref: "#/components/schemas/Group.item"
        Store.list:
          type: object
          properties:
            stores:
              type: array
              items:
                $ref: "#/components/schemas/Store.item"
        User.item:
          type: object
          properties:
            username:
              type: string
            roles:
              type: array
              items:
                type: string
            services:
              type: array
              items:
                $ref: "#/components/schemas/Service.item"
            email:
              type: string
              format: email
            isVerified:
              type: boolean
            group:
              type: array
              items:
                $ref: "#/components/schemas/Group.item"
            preferences:
              $ref: "#/components/schemas/Preference.item"
            mounts:
              type: array
              items:
                $ref: "#/components/schemas/Mount.item"
            apiKey:
              type: string
        User.list:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/User.item"
        Widget.item:
          type: object
          properties:
            id:
              type: integer
              format: int64
              example: 1
            name:
              type: string
              example: "CPU 1"
            description:
              type: string
              example: "cpu_1"
            type:
              type: string
              example: "cpu"
        Widget.list:
          type: object
          properties:
            widgets:
              type: array
              items:
                $ref: "#/components/schemas/Widget.item"
            totalResults:
              type: integer
              example: 10
              description: "Total number of widgets in the list"
        # WIDGET SCHEMAS
        Widget.cpu.item:
          type: object
          properties:
            model:
              type: string
            percentage:
              type: number
              format: double
            loadAverage:
              type: object
              properties:
                1min:
                  type: number
                  format: double
                5min:
                  type: number
                  format: double
                15min:
                  type: number
                  format: double
        Widget.disk.item:
          type: object
          properties:
            total:
              type: number
            used:
              type: number
            free:
              type: number
            percentage:
              type: number
        Widget.network.item:
          type: object
          properties:
            interface:
              type: string
            downloadSpeed:
              type: number
              format: float
            uploadSpeed:
              type: number
              format: float
        Widget.memory.item:
          type: object
          properties:
            total:
              type: number
              format: float
              description: Total amount of RAM available, in MB.
            used:
              type: number
              format: float
              description: Amount of RAM used, in MB.
            free:
              type: number
              format: float
              description: Amount of free RAM, in MB.
            available:
              type: number
              format: float
              description: Amount of RAM available for use, in MB.
            percentage:
              type: number
              format: float
              description: Percentage of RAM currently used.
        Widget.ram.item:
          $ref: "#/components/schemas/Widget.memory.item"
        # ERROR SCHEMAS
        LocaleOrigin:
          type: string
          enum:
            - DEFAULT
            - REQUEST
          description: An indicator of how the locale was selected. *DEFAULT* means the locale is the system default. *REQUEST* means the locale was selected from the request context (i.e., best match based on the *Accept-Language* header). Additional values may be added in the future without notice.
          example: DEFAULT
        ErrorMessageDto:
          type: object
          properties:
            locale:
              type: string
              description: The locale for the message text, a BCP 47 language tag.
              example: en-US
            localeOrigin:
              $ref: "#/components/schemas/LocaleOrigin"
            text:
              type: string
              description: Actual text of the error message in the indicated locale.
              example: The request was syntactically correct but its content is semantically invalid.
        ErrorResponseDto:
          type: object
          properties:
            detailCode:
              type: string
              description: Fine-grained error code providing more detail of the error.
              example: 400.1 Bad Request Content
            trackingId:
              type: string
              description: Unique tracking id for the error.
              example: e7eab60924f64aa284175b9fa3309599
            messages:
              type: array
              description: Generic localized reason for error
              items:
                $ref: "#/components/schemas/ErrorMessageDto"
            causes:
              type: array
              description: Plain-text descriptive reasons to provide additional detail to the text provided in the messages field
              items:
                $ref: "#/components/schemas/ErrorMessageDto"
